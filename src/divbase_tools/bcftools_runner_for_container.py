"""
A script to run bcftools commands as a batch job in a docker container.
As input, it takes a JSON configuration file generated by divbase-cli query bcftools-pipe.
"""

import json
import logging
import os
import subprocess
import sys

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger("bcftools_runner")


def run_bcftools(command: str) -> None:
    logger.info(f"Running: bcftools {command}")
    subprocess.run(["bcftools"] + command.split(), check=True)


def ensure_csi_index(file: str) -> None:
    """
    Ensure that the given VCF file has a .csi index. If not, create it using bcftools.

    bcftools can often work on VCF files that lack an index file, but for consistency
    it is better to create an index file for all VCF files.
    """
    index_file = f"{file}.csi"
    if not os.path.exists(index_file):
        index_command = f"index -f {file}"
        run_bcftools(command=index_command)


def process_command_config(cmd_config):
    """Process a single command configuration."""
    command = cmd_config["command"]
    input_files = cmd_config["input_files"]
    temp_files = cmd_config["temp_files"]
    sample_subset = cmd_config["sample_subset"]

    for f_counter, file in enumerate(input_files):
        temp_file = temp_files[f_counter]

        samples_in_file = []
        for record in sample_subset:
            if record["Filename"] == file:
                samples_in_file.append(record["Sample_ID"])

        samples_in_file_bcftools_formatted = ",".join(samples_in_file)

        cmd_with_samples = command.strip().replace("SAMPLES", samples_in_file_bcftools_formatted)
        formatted_cmd = f"{cmd_with_samples} {file} -Oz -o {temp_file}"
        run_bcftools(command=formatted_cmd)
        ensure_csi_index(temp_file)
    return temp_files


def merge_bcftools_temp_files(temp_files):
    """
    Merge all temporary files produced by pipe_query_command into a single output file.
    """
    # TODO error handling for when temp files are missing or has not been cleaned up since last run (e.g. if the last run aborted)
    if len(temp_files) > 1:
        merge_command = f"merge --force-samples -Oz -o merged.vcf.gz {' '.join(temp_files)}"
        run_bcftools(command=merge_command)
        logger.info("Merged all temporary files into 'merged.vcf.gz'.")


def cleanup_temp_files(temp_files: list) -> None:
    """
    Delete all temporary files and their associated .csi index files
    generated during the pipe_query_command execution.
    """
    for temp_file in temp_files:
        try:
            if os.path.exists(temp_file):
                os.remove(temp_file)
            index_file = f"{temp_file}.csi"
            if os.path.exists(index_file):
                os.remove(index_file)
        except Exception as e:
            logger.error(f"Failed to delete temporary file or index {temp_file}: {e}")


def main():
    """
    Main function to run the bcftools commands based on the configuration read from stdin.
    Interprets the JSON configuration, processes and runs each command, ensures that files are indexed, and merges the results.
    """
    commands_config = json.load(sys.stdin)

    logger.info(f"Loaded configuration with {len(commands_config)} commands in the pipe")

    all_temp_files = []
    final_temp_files = None

    for cmd_config in commands_config:
        logger.info(f"Processing command #{cmd_config['counter'] + 1}: {cmd_config['command']}")
        temp_files = process_command_config(cmd_config)
        final_temp_files = temp_files
        all_temp_files.extend(temp_files)

    merge_bcftools_temp_files(final_temp_files)

    cleanup_temp_files(all_temp_files)

    logger.info("bcftools processing completed successfully")


if __name__ == "__main__":
    main()
