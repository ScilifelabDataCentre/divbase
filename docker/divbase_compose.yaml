name: divbase
services:
  rabbitmq:
    image: "rabbitmq:alpine"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5672:5672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq #to avoid anonymous volumes being created
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
  worker-quick:
    build: &worker-build
      context: .. 
      dockerfile: docker/worker.dockerfile
    healthcheck: &worker-healthcheck
      test: ["CMD", "celery", "inspect", "ping"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on: &worker-depends
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment: &worker-env
      - CELERY_BROKER_URL=pyamqp://guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DIVBASE_S3_ACCESS_KEY=minioadmin
      - DIVBASE_S3_SECRET_KEY=badpassword
    develop: &watch-celery-src
      watch:
        - action: sync+restart
          path: ../packages/divbase-worker/src
          target:  /app/packages/divbase-worker/src
        - action: sync+restart
          path: ../packages/divbase-lib/src
          target:  /app/packages/divbase-lib/src
        - action: rebuild
          path: ../uv.lock
    command: ["-Q", "quick,celery", "--hostname=worker-quick@%h", "--concurrency=4"] #-Q "celery" is the default queue, so let the quick worker also handle it to avoid issues with tasks not being picked up
  worker-long:
    build: *worker-build
    healthcheck: *worker-healthcheck
    depends_on: *worker-depends
    environment: *worker-env
    develop: *watch-celery-src
    command: ["-Q", "long", "--hostname=worker-long@%h", "--concurrency=4"]
  flower:
    build:
      context: ..
      dockerfile: docker/flower.dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "-u", "floweradmin:badpassword", "http://localhost:5555/"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5555:5555
    depends_on: *worker-depends
    environment:
      - CELERY_BROKER_URL=pyamqp://guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=floweradmin:badpassword
    develop: *watch-celery-src
    command: ["flower", "--persistent=True", "--db=/data/flower.db"]
    volumes:
      - flower-data:/data
  minio:
    image: bitnamilegacy/minio:2025.7.23-debian-12-r5
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: badpassword
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5
    user: "0:0" #for local dev only! To avoid volume permission issues with Docker on macOS
    volumes:
      - minio-data:/data
      - minio-bitnami-data:/bitnami/minio/data #to avoid anonymous volumes being created
      - minio-certs:/certs #to avoid anonymous volumes being created
  fastapi:
    build:
      context: ..
      dockerfile: docker/fastapi.dockerfile
    ports:
      - 8000:8000
    command: ["fastapi", "dev", "--host", "0.0.0.0", "/app/packages/divbase-api/src/divbase_api/divbase_api.py"]
    develop: # rebuild only on changes to deps. 
      watch:
        - action: sync
          path: ../packages/divbase-api/src
          target: /app/packages/divbase-api/src
        - action: sync
          path: ../packages/divbase-worker/src
          target: /app/packages/divbase-worker/src
        - action: sync
          path: ../packages/divbase-lib/src
          target: /app/packages/divbase-lib/src
        - action: rebuild
          path: ../uv.lock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
    - FLOWER_HOST=http://flower:5555 # Use the service name as the host for fastAPI to access Flower
    - FLOWER_USER=floweradmin
    - FLOWER_PASSWORD=badpassword
    - DIVBASE_USER=divbase_user_set_in_compose_file
    - CELERY_BROKER_URL=pyamqp://guest@rabbitmq:5672//
    - CELERY_RESULT_BACKEND=redis://redis:6379/0
    - DATABASE_URL=postgresql+asyncpg://divbase_user:badpassword@postgres:5432/divbase_db
    - JWT_SECRET_KEY=a-string-secret-at-least-256-bits-long
    - FIRST_ADMIN_EMAIL=admin@divbase.com
    - FIRST_ADMIN_PASSWORD=badpassword
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U divbase_user -d divbase_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=divbase_user
      - POSTGRES_DB=divbase_db
      - POSTGRES_PASSWORD=badpassword
volumes:
  rabbitmq-data:
  redis-data:
  flower-data:
  minio-data:
  minio-bitnami-data:
  minio-certs:
  postgres-data: